# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-chatroom

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  tableName: serverless-chatroom-table-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environment:
    MESSAGES_TABLE: ${self:custom.tableName}
    AWS_DEPLOY_REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ChatMessagesDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [ 
           { "Fn::GetAtt": ["ChatMessagesDynamoDBTable", "Arn" ] }, "index", "roomIndex" 
          ]]}
        - { "Fn::Join": [ "/", [
            { "Fn::GetAtt": ["ChatMessagesDynamoDBTable", "Arn" ] }, "index", "userIndex" 
          ]]}     

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createChatMessage:
    handler: handler.createChatMessage
    events:
      - http: 
          method: POST
          path: /messages
          private: false
  getMessage:
    handler: handler.getMessage 
    events:
      - http:
          method: GET
          path: /messages
          private: false
  getRoomMessages:
    handler: handler.getRoomMessages
    events:
      - http:
          method: GET
          path: /messages/room/{room}
          private: false
  getUserMessages:
    handler: handler.getUserMessages
    events:
      - http:
          method: GET
          path: /messages/user/{userId}
          private: false

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    ChatMessagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties: # Describes the table. DynamoDB not required to declare columns.
        AttributeDefinitions: # [] of Attributes that describe key schema for table|indexes.
          - AttributeName: messageId # Name for attribute
            AttributeType: S # Datatype of attribute (S = string, N = number, B = binary)
          - AttributeName: room
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema: # Specifies attributes that make up the primary key for table|index
          - AttributeName: messageId # This key attribute needs to be declared in AttributeDefinitions too.
            KeyType: HASH # Alternative is RANGE - stores items with the same partition key physically close together, in sorted order by the sort key value. 
        GlobalSecondaryIndexes: # Maximum 5 GSI's
          - IndexName: roomIndex # Name of index - must be unique
            KeySchema: # Defines which AttributeDefinition we're using here
              - AttributeName: room
                KeyType: HASH
            Projection: # Specifies attributes that are copied (projected) from the table into the index
              ProjectionType: ALL
            ProvisionedThroughput: # Settings for the global secondary index, consisting of read and write capacity units
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: userIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}